services:
  db:
    image: postgres:15
    container_name: raceflow-db
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    volumes:
      - db-data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  app:
    build:
      context: ./Backend/RaceFlow
      dockerfile: Dockerfile
    container_name: raceflow-app
    ports:
      - "${APP_PORT}:${APP_PORT}"
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:${APP_PORT}/actuator/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  react-app:
    build:
      context: ./Frontend/RaceFlow
      dockerfile: Dockerfile
    ports:
      - "${REACT_PORT}:${REACT_PORT}"
    networks:
      - app-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.4
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_CLIENT_PORT}
      ZOOKEEPER_TICK_TIME: ${ZOOKEEPER_TICK_TIME}
    ports:
      - "${ZOOKEEPER_PORT}:${ZOOKEEPER_CLIENT_PORT}"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "echo", "stat", "|", "nc", "localhost", "${ZOOKEEPER_CLIENT_PORT}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  kafka:
    image: confluentinc/cp-kafka:7.4.4
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "${KAFKA_HOST_PORT}:${KAFKA_HOST_PORT}"
    environment:
      KAFKA_BROKER_ID: ${KAFKA_BROKER_ID}
      KAFKA_ZOOKEEPER_CONNECT: ${KAFKA_ZOOKEEPER_CONNECT}
      KAFKA_ADVERTISED_LISTENERS: ${KAFKA_ADVERTISED_LISTENERS}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: ${KAFKA_LISTENER_SECURITY_PROTOCOL_MAP}
      KAFKA_INTER_BROKER_LISTENER_NAME: ${KAFKA_INTER_BROKER_LISTENER_NAME}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: ${KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR}
      KAFKA_LOG_RETENTION_MS: ${KAFKA_LOG_RETENTION_MS}
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: ${KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS}
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "${KAFKA_HOST_PORT}"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app-network

  kafdrop:
    image: obsidiandynamics/kafdrop:4.0.2
    depends_on:
      - kafka
    ports:
      - "9009:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka:9092"
      SERVER_SERVLET_CONTEXTPATH: "/"
    networks:
      - app-network


  producer:
    build:
      context: ./DataGen
      dockerfile: Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
    networks: 
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  db-data:
